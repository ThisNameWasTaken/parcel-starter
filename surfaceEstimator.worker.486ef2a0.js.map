{"version":3,"sources":["../js/surfaceEstimator.worker.js"],"names":["self","addEventListener","event","postMessage","estimateSurface","data","equalsPoint","x","y","_x","_y","imageData","randomPoints","canvasWidth","canvasHeight","hits","misses","i","length","randomX","randomY","find","push","pointsCount","hitsCount","estimatedSurface","Math","floor"],"mappings":";AAqCC,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EArCDA,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BF,KAAKG,YAAiBC,EAAAA,GAAAA,EAAqBF,EAAAA,GAAAA,EAAMG,WAGnD,IAAMC,EAAc,SAACC,EAAGC,GAAM,OAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAEC,EAAF,EAAA,GAAMC,EAAN,EAAA,GAAcD,OAAAA,IAAOF,GAAKG,IAAOF,IAE/D,SAASJ,EAKN,GAII,IARLO,IAAAA,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,aAEMC,EAAO,GACPC,EAAS,GAENC,EAAI,EAAGA,EAAIL,EAAaM,OAAQD,IAAK,CACDL,IAAAA,EAAAA,EAAAA,EAAaK,GADZ,GACrCE,EADqC,EAAA,GAC5BC,EAD4B,EAAA,GAI9B,IADAT,EAH8B,EAAA,IAKrCI,EAAKM,KAAKf,EAAYa,EAASC,KAClCL,EAAKO,KAAK,CAACH,EAASC,IAGjBJ,EAAOK,KAAKf,EAAYa,EAASC,KACpCJ,EAAOM,KAAK,CAACH,EAASC,IAKtBG,IAAAA,EAAcR,EAAKG,OAASF,EAAOE,OACnCM,EAAYT,EAAKG,OAKhB,MAAA,CAAEO,iBAJgBC,KAAKC,MAC3BH,EAAYD,GAAgBV,EAAcC,IAGlBC,KAAAA,EAAMC,OAAAA","file":"surfaceEstimator.worker.486ef2a0.js","sourceRoot":"..\\src\\views","sourcesContent":["self.addEventListener('message', event => {\r\n  self.postMessage({ ...estimateSurface({ ...event.data }) });\r\n});\r\n\r\nconst equalsPoint = (x, y) => ([_x, _y]) => _x === x && _y === y;\r\n\r\nfunction estimateSurface({\r\n  imageData,\r\n  randomPoints,\r\n  canvasWidth,\r\n  canvasHeight,\r\n}) {\r\n  const hits = [];\r\n  const misses = [];\r\n\r\n  for (let i = 0; i < randomPoints.length; i++) {\r\n    const [randomX, randomY, imageDataIndex] = randomPoints[i];\r\n\r\n    const alpha = imageData[imageDataIndex];\r\n    if (alpha !== 0) {\r\n      if (!hits.find(equalsPoint(randomX, randomY))) {\r\n        hits.push([randomX, randomY]);\r\n      }\r\n    } else {\r\n      if (!misses.find(equalsPoint(randomX, randomY))) {\r\n        misses.push([randomX, randomY]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const pointsCount = hits.length + misses.length;\r\n  const hitsCount = hits.length;\r\n  const estimatedSurface = Math.floor(\r\n    (hitsCount / pointsCount) * (canvasWidth * canvasHeight)\r\n  );\r\n\r\n  return { estimatedSurface, hits, misses };\r\n}\r\n"]}