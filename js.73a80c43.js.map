{"version":3,"sources":["../js/index.js"],"names":["loader","document","querySelector","canvas","getElementById","canvasOptions","width","window","innerWidth","height","innerHeight","penOptions","fillColor","size","hitOptions","missOptions","setAttribute","offscreenCanvas","transferControlToOffscreen","ctx","getContext","body","addEventListener","startDrawing","passive","draw","stopDrawing","prevX","prevY","randomPoints","pointsGeneratorWorker","Worker","event","data","isDrawing","fillStyle","strokeStyle","lineWidth","lineCap","lineJoin","clearCanvas","beginPath","clientX","touches","clientY","postMessage","canvasWidth","canvasHeight","moveTo","lineTo","stroke","closePath","calculateSurface","clearRect","drawDot","x","y","arc","Math","PI","fill","equalsPoint","_x","_y","hits","misses","imageData","getImageData","i","length","randomX","randomY","find","push","forEach","hit","pointsCount","hitsCount","surface","floor","console","log"],"mappings":";AAoJC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EApJD,IAAMA,EAASC,SAASC,cAAc,WAKhCC,EAASF,SAASG,eAAe,UAEjCC,EAAgB,CACpBC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAGXC,EAAa,CACjBC,UAAW,OACXC,KAAM,IAGFC,EAAa,CACjBF,UAAW,QAGPG,EAAc,CAClBH,UAAW,QAGbT,EAAOa,aAAa,QAAYX,GAAAA,OAAAA,EAAcC,MAA9C,OACAH,EAAOa,aAAa,SAAaX,GAAAA,OAAAA,EAAcI,OAA/C,OAEA,IAAMQ,EAAkBd,EAAOe,6BAGzBC,EAAMF,EAAgBG,WAAW,MAEvCnB,SAASoB,KAAKC,iBAAiB,YAAaC,EAAc,CAAEC,SAAS,IACrEvB,SAASoB,KAAKC,iBAAiB,aAAcC,EAAc,CAAEC,SAAS,IAEtEvB,SAASoB,KAAKC,iBAAiB,YAAaG,EAAM,CAAED,SAAS,IAC7DvB,SAASoB,KAAKC,iBAAiB,YAAaG,EAAM,CAAED,SAAS,IAE7DvB,SAASoB,KAAKC,iBAAiB,UAAWI,EAAa,CAAEF,SAAS,IAClEvB,SAASoB,KAAKC,iBAAiB,WAAYI,EAAa,CAAEF,SAAS,IAEnE,IAQIG,EACAC,EATAC,EAAe,GAEbC,EAAwB,IAAIC,OAAO,wCAEzCD,EAAsBR,iBAAiB,UAAW,SAAAU,GAChDH,EAAeG,EAAMC,KAAKJ,eAK5B,IAAIK,GAAY,EAChB,SAASX,EAAaS,GACpBb,EAAIgB,UAAYxB,EAAWC,UAC3BO,EAAIiB,YAAczB,EAAWC,UAC7BO,EAAIkB,UAAY1B,EAAWE,KAC3BM,EAAImB,QAAU,QACdnB,EAAIoB,SAAW,QAEfC,IACArB,EAAIsB,YACJP,GAAY,EACZP,EAAQK,EAAMU,SAAWV,EAAMW,QAAQ,GAAGD,QAC1Cd,EAAQI,EAAMY,SAAWZ,EAAMW,QAAQ,GAAGC,QAE1Cd,EAAsBe,YAAY,CAChCC,YAAazC,EAAcC,MAC3ByC,aAAc1C,EAAcI,SAIhC,SAASgB,EAAKO,GACR,GAACE,EAAD,CAEEQ,IAAAA,EAAUV,EAAMU,SAAWV,EAAMW,QAAQ,GAAGD,QAC5CE,EAAUZ,EAAMY,SAAWZ,EAAMW,QAAQ,GAAGC,QAElDzB,EAAI6B,OAAOrB,EAAOC,GAClBT,EAAI8B,OAAOP,EAASE,GACpBzB,EAAI+B,SAEJvB,EAAQe,EACRd,EAAQgB,GAGV,SAASlB,IACPP,EAAIgC,YACJjB,GAAY,EAEZkB,IAGF,SAASZ,IACPrB,EAAIkC,UAAU,EAAG,EAAGhD,EAAcC,MAAOD,EAAcI,QAGzD,SAAS6C,EAAQC,EAAGC,GAClBrC,EAAIsB,YACJtB,EAAIsC,IAAIF,EAAGC,EAAG,EAAG,EAAG,EAAIE,KAAKC,IAC7BxC,EAAIyC,OAGN,IAAMC,EAAc,SAACN,EAAGC,GAAM,OAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAEM,EAAF,EAAA,GAAMC,EAAN,EAAA,GAAcD,OAAAA,IAAOP,GAAKQ,IAAOP,IAE/D,SAASJ,IAWF,IAVCY,IAAAA,EAAO,GACPC,EAAS,GAETC,EAAY/C,EAAIgD,aACpB,EACA,EACA9D,EAAcC,MACdD,EAAcI,QACdwB,KAEOmC,EAAI,EAAGA,EAAIvC,EAAawC,OAAQD,IAAK,CACDvC,IAAAA,EAAAA,EAAAA,EAAauC,GADZ,GACrCE,EADqC,EAAA,GAC5BC,EAD4B,EAAA,GAI9B,IADAL,EAH8B,EAAA,IAKrCF,EAAKQ,KAAKX,EAAYS,EAASC,KAClCP,EAAKS,KAAK,CAACH,EAASC,IAGjBN,EAAOO,KAAKX,EAAYS,EAASC,KACpCN,EAAOQ,KAAK,CAACH,EAASC,IAK5BpD,EAAIgB,UAAYrB,EAAWF,UAC3BO,EAAIiB,YAActB,EAAWF,UAC7BoD,EAAKU,QAAQ,SAAAC,GAAOrB,OAAAA,EAAA,WAAWqB,EAAAA,EAAAA,MAE/BxD,EAAIgB,UAAYpB,EAAYH,UAC5BO,EAAIiB,YAAcrB,EAAYH,UAC9BqD,EAAOS,QAAQ,SAAAC,GAAOrB,OAAAA,EAAA,WAAWqB,EAAAA,EAAAA,MAE3BC,IAAAA,EAAcZ,EAAKK,OAASJ,EAAOI,OACnCQ,EAAYb,EAAKK,OACjBS,EAAUpB,KAAKqB,MAClBF,EAAYD,GAAgBvE,EAAcC,MAAQD,EAAcI,SAK5DqE,OAFPE,QAAQC,IAAI,CAAEH,QAAAA,IAEPA","file":"js.73a80c43.js","sourceRoot":"..\\src\\views","sourcesContent":["const loader = document.querySelector('.loader');\r\n\r\n// TODO: Make it work with offscreen canvas\r\n// TODO: Refactor everything inside a class\r\n\r\nconst canvas = document.getElementById('canvas');\r\n\r\nconst canvasOptions = {\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n};\r\n\r\nconst penOptions = {\r\n  fillColor: '#48f',\r\n  size: 50,\r\n};\r\n\r\nconst hitOptions = {\r\n  fillColor: '#4f3',\r\n};\r\n\r\nconst missOptions = {\r\n  fillColor: '#f43',\r\n};\r\n\r\ncanvas.setAttribute('width', `${canvasOptions.width}px`);\r\ncanvas.setAttribute('height', `${canvasOptions.height}px`);\r\n\r\nconst offscreenCanvas = canvas.transferControlToOffscreen();\r\n\r\n/** @type {CanvasRenderingContext2D} */\r\nconst ctx = offscreenCanvas.getContext('2d');\r\n\r\ndocument.body.addEventListener('mousedown', startDrawing, { passive: true });\r\ndocument.body.addEventListener('touchstart', startDrawing, { passive: true });\r\n\r\ndocument.body.addEventListener('mousemove', draw, { passive: true });\r\ndocument.body.addEventListener('touchmove', draw, { passive: true });\r\n\r\ndocument.body.addEventListener('mouseup', stopDrawing, { passive: true });\r\ndocument.body.addEventListener('touchend', stopDrawing, { passive: true });\r\n\r\nlet randomPoints = [];\r\n\r\nconst pointsGeneratorWorker = new Worker('./pointsGeneratorWorker.js');\r\n\r\npointsGeneratorWorker.addEventListener('message', event => {\r\n  randomPoints = event.data.randomPoints;\r\n});\r\n\r\nlet prevX;\r\nlet prevY;\r\nlet isDrawing = false;\r\nfunction startDrawing(event) {\r\n  ctx.fillStyle = penOptions.fillColor;\r\n  ctx.strokeStyle = penOptions.fillColor;\r\n  ctx.lineWidth = penOptions.size;\r\n  ctx.lineCap = 'round';\r\n  ctx.lineJoin = 'round';\r\n\r\n  clearCanvas();\r\n  ctx.beginPath();\r\n  isDrawing = true;\r\n  prevX = event.clientX || event.touches[0].clientX;\r\n  prevY = event.clientY || event.touches[0].clientY;\r\n\r\n  pointsGeneratorWorker.postMessage({\r\n    canvasWidth: canvasOptions.width,\r\n    canvasHeight: canvasOptions.height,\r\n  });\r\n}\r\n\r\nfunction draw(event) {\r\n  if (!isDrawing) return;\r\n\r\n  const clientX = event.clientX || event.touches[0].clientX;\r\n  const clientY = event.clientY || event.touches[0].clientY;\r\n\r\n  ctx.moveTo(prevX, prevY);\r\n  ctx.lineTo(clientX, clientY);\r\n  ctx.stroke();\r\n\r\n  prevX = clientX;\r\n  prevY = clientY;\r\n}\r\n\r\nfunction stopDrawing() {\r\n  ctx.closePath();\r\n  isDrawing = false;\r\n\r\n  calculateSurface();\r\n}\r\n\r\nfunction clearCanvas() {\r\n  ctx.clearRect(0, 0, canvasOptions.width, canvasOptions.height);\r\n}\r\n\r\nfunction drawDot(x, y) {\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, 1, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n}\r\n\r\nconst equalsPoint = (x, y) => ([_x, _y]) => _x === x && _y === y;\r\n\r\nfunction calculateSurface() {\r\n  const hits = [];\r\n  const misses = [];\r\n\r\n  const imageData = ctx.getImageData(\r\n    0,\r\n    0,\r\n    canvasOptions.width,\r\n    canvasOptions.height\r\n  ).data;\r\n\r\n  for (let i = 0; i < randomPoints.length; i++) {\r\n    const [randomX, randomY, imageDataIndex] = randomPoints[i];\r\n\r\n    const alpha = imageData[imageDataIndex];\r\n    if (alpha !== 0) {\r\n      if (!hits.find(equalsPoint(randomX, randomY))) {\r\n        hits.push([randomX, randomY]);\r\n      }\r\n    } else {\r\n      if (!misses.find(equalsPoint(randomX, randomY))) {\r\n        misses.push([randomX, randomY]);\r\n      }\r\n    }\r\n  }\r\n\r\n  ctx.fillStyle = hitOptions.fillColor;\r\n  ctx.strokeStyle = hitOptions.fillColor;\r\n  hits.forEach(hit => drawDot(...hit));\r\n\r\n  ctx.fillStyle = missOptions.fillColor;\r\n  ctx.strokeStyle = missOptions.fillColor;\r\n  misses.forEach(hit => drawDot(...hit));\r\n\r\n  const pointsCount = hits.length + misses.length;\r\n  const hitsCount = hits.length;\r\n  const surface = Math.floor(\r\n    (hitsCount / pointsCount) * (canvasOptions.width * canvasOptions.height)\r\n  );\r\n\r\n  console.log({ surface });\r\n\r\n  return surface;\r\n}\r\n"]}